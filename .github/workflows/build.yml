name: Build Linux Kernel Alpine Package
on:
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ main ]  # Run automatically on push to main branch
  schedule:
    - cron: '0 */8 * * *'  # Run every 8 hours

jobs:
  build-kernel:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Need write permission to create Release
    
    steps:
      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/local/lib/android
          sudo apt-get clean
          df -h

      - name: Create work directory
        run: |
          mkdir -p kernel-build
          mkdir -p artifacts
          chmod 777 artifacts  # Ensure the output directory is writable

      - name: Download kernel config file
        run: |
          cd kernel-build
          wget -O config-6.14 https://raw.githubusercontent.com/huifujing/amd-kernel-6.14.0/main/config-6.1.0-32-amd64
          if [ $? -ne 0 ]; then
            echo "Failed to download config file"
            exit 1
          fi

      - name: Create build files
        run: |
          # Create APKBUILD file
          cat > kernel-build/APKBUILD << 'EOF'
          # Maintainer: Auto Build <auto@build.local>
          pkgname=linux-custom
          pkgver=6.14
          _pkgver=6.14
          pkgrel=0
          pkgdesc="Linux kernel with custom configuration for AMD systems"
          url="https://www.kernel.org"
          arch="x86_64"
          license="GPL-2.0-only"
          makedepends="
              bash
              bc
              bison
              flex
              gmp-dev
              elfutils-dev
              installkernel
              linux-headers
              mpc1-dev
              mpfr-dev
              openssl-dev
              perl
              xz
              "
          options="!strip"
          source="
              https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-$_pkgver.tar.xz
              config-6.14
              "
          builddir="$srcdir/linux-$_pkgver"

          prepare() {
              default_prepare
              cp "$srcdir"/config-6.14 .config
              # Disable debug info to reduce build size
              sed -i 's/CONFIG_DEBUG_INFO=y/CONFIG_DEBUG_INFO=n/' .config
              sed -i 's/CONFIG_DEBUG_INFO_DWARF4=y/CONFIG_DEBUG_INFO_DWARF4=n/' .config
              sed -i 's/CONFIG_DEBUG_INFO_BTF=y/CONFIG_DEBUG_INFO_BTF=n/' .config
              echo "CONFIG_DEBUG_INFO_REDUCED=y" >> .config
              make olddefconfig
          }

          build() {
              make -j$(nproc) all
          }

          package() {
              mkdir -p "$pkgdir"/boot "$pkgdir"/lib/modules
              make INSTALL_MOD_PATH="$pkgdir" modules_install
              make INSTALL_PATH="$pkgdir"/boot install
              
              # Create symlinks for easier booting
              rm -f "$pkgdir"/lib/modules/$_pkgver/build "$pkgdir"/lib/modules/$_pkgver/source
              rm -f "$pkgdir"/boot/System.map "$pkgdir"/boot/config "$pkgdir"/boot/vmlinuz
              ln -sf "System.map-$_pkgver" "$pkgdir"/boot/System.map
              ln -sf "config-$_pkgver" "$pkgdir"/boot/config
              ln -sf "vmlinuz-$_pkgver" "$pkgdir"/boot/vmlinuz
          }
          EOF

          # Create Docker build script
          cat > kernel-build/build.sh << 'EOF'
          #!/bin/sh
          set -e
          
          # Setup Alpine build environment
          apk update
          apk add --no-cache alpine-sdk linux-headers git curl wget ncurses-dev openssl-dev elfutils-dev \
            bc flex bison xz perl coreutils findutils bash lz4

          # Create build user
          adduser -D packager
          addgroup packager abuild
          echo "packager ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
          
          # Setup abuild directories and config
          mkdir -p /home/packager/aports/custom
          cp /src/APKBUILD /src/config-6.14 /home/packager/aports/custom/
          chown -R packager:packager /home/packager

          # Setup abuild configuration
          mkdir -p /home/packager/.abuild
          cat > /home/packager/.abuild/abuild.conf << 'ABUILDCONF'
          PACKAGER="Alpine Build <build@local>"
          PACKAGER_PRIVKEY="/home/packager/.abuild/abuild.key"
          MAINTAINER="$PACKAGER"
          CLEANUP="srcdir"
          ABUILDCONF
          chown -R packager:packager /home/packager/.abuild

          # Switch to packager user and build
          cd /home/packager/aports/custom
          su packager -c "abuild-keygen -n -a -i"
          # Copy the key to system-wide location
          cp /home/packager/.abuild/*.pub /etc/apk/keys/
          
          # Build the package
          su packager -c "abuild checksum"
          su packager -c "abuild -r"

          # Copy the built packages to output directory with correct permissions
          find /home/packager/packages -name "*.apk" -type f -exec cp {} /output/ \;
          chown -R $(stat -c "%u:%g" /output) /output
          EOF
          
          chmod +x kernel-build/build.sh

      - name: Build Alpine Linux kernel package with Docker
        run: |
          docker run --rm -v $(pwd)/kernel-build:/src -v $(pwd)/artifacts:/output alpine:edge sh /src/build.sh

      - name: Find and prepare Alpine packages
        id: find-apks
        run: |
          echo "release_date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          ls -la ./artifacts/
          find ./artifacts -name "*.apk" -type f | sort > ./artifacts/package-list.txt
          if [ -s ./artifacts/package-list.txt ]; then
            echo "Found packages:"
            cat ./artifacts/package-list.txt
          else
            echo "No packages were built!"
            exit 1
          fi
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-apks
          path: ./artifacts/*.apk
          retention-days: 7
          
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: kernel-${{ steps.find-apks.outputs.release_date }}
          name: Linux Kernel 6.14 Alpine Build ${{ steps.find-apks.outputs.release_date }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ./artifacts/*.apk
          body: |
            Linux Kernel 6.14 build with AMD configuration for Alpine Linux
            
            Built on: ${{ steps.find-apks.outputs.release_date }}
            
            ## Packages:
            ```
            $(cat ./artifacts/package-list.txt)
            ```
            
            This is an automated build triggered by GitHub Actions.
